#getContent(data$href[1])
allText = sapply(data$href, getContent)
allText
#out <- file(filename, "w", encoding="BIG-5")
write.table(allText, filename)
#close(out)
}
source('pttTestFunction.R')
id = c(1:10)
URL = paste0("https://www.ptt.cc/bbs/NTUcourse/index", id, ".html")
filename = paste0(id, ".txt")
pttTestFunction(URL[1], filename[1])
mapply(pttTestFunction,
URL = URL, filename = filename)
pttTestFunction <- function(URL, filename)
{
URL   = "https://www.ptt.cc/bbs/NTUcourse/index.html"
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
allText
#out <- file(filename, "w", encoding="BIG-5")
write.table(allText, filename)
#close(out)
}
source('pttTestFunction.R')
id = c(1:10)
URL = paste0("https://www.ptt.cc/bbs/NTUcourse/index", id, ".html")
filename = paste0(id, ".txt")
pttTestFunction(URL[1], filename[1])
mapply(pttTestFunction,
URL = URL, filename = filename)
id<- c(1984:1993)
filename<- paste0(id-1984, ".txt")
URL<- paste0("https://www.ptt.cc/bbs/NTUcourse/index", id, ".html")
url_function<- function(URL, filename){
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
sapply(id, url_function)
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
write.table(allText, filename)
}
mapply(url_function, URL= URL, filename= filename)
id<- c(1983:1992)
rm(list=ls(all.names = TRUE))
library(rvest)
id<- c(1983:1992)
filename<- paste0(id-1983, ".txt")
URL<- paste0("https://www.ptt.cc/bbs/NTUcourse/index", id, ".html")
url_function<- function(URL, filename){
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
sapply(id, url_function)
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
write.table(allText, filename)
}
mapply(url_function, URL= URL, filename= filename)
url_function<- function(URL, filename){
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
sapply(id, url_function)
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
write.table(allText, filename)
}
url_function(URL[1], filename[1])
URL<-  "https://www.ptt.cc/bbs/NTUcourse/index"
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
sapply(id, url_function)
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
URL<-  "https://www.ptt.cc/bbs/NTUcourse/index"
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
URL<-  "https://www.ptt.cc/bbs/NTUcourse/index"
html  = read_html(URL)
title = html_nodes(html, "a")
c
c
library(tmcn)
rm(list=ls(all.names = TRUE))
library(rvest)
URL<-  "https://www.ptt.cc/bbs/NTUcourse/index"
html  = read_html(URL)
title = html_nodes(html, "a")
install.package("devtools")
install.packages("devtools")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install_github("ggbiplot", "vqv")
?install_github
library(devtools)
?install_github
install_github("ggbiplot", "vqv")
setwd("D:/github/2017_data_course/example/DSML")
library(scales)
library(grid)
library(ggbiplot)
library(scales)
library(grid)
library(ggbiplot)
library(devtools)
data(iris)
ir.pca <- prcomp(iris[,1:4])
ir.species <- iris[, 5]
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
data(iris)
ir.pca <- prcomp(iris[,1:4])
ir.species <- iris[, 5]
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
View(iris)
View(ir.pca)
View(inspect(ir.pca))
prcomp(iris[,1:4])
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
print(g)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
?ggbiplot
?prcomp
library(e1071)
install.packages("e1071")
library(e1071)
set.seed(10111)
x = matrix(rnorm(40), 20, 2)
y = rep(c(-1, 1), c(10, 10))
x[y == 1, ] = x[y == 1, ] + 1
plot(x, col = y + 3, pch = 19)
library(e1071)
dat = data.frame(x, y = as.factor(y))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(xml2)
library(tmcn)
library(rvest)
pttTestFunction <- function(URL, filename)
{
#URL   = "https://www.ptt.cc/bbs/NTUcourse/index.html"
html  = read_html(URL)
title = html_nodes(html, "a")
href  = html_attr(title, "href")
data = data.frame(title = toUTF8(html_text(title)),
href = href)
data = data[-c(1:10),]
getContent <- function(x) {
url  = paste0("https://www.ptt.cc", x)
tag  = html_node(read_html(url), 'div#main-content.bbs-screen.bbs-content')
text = toUTF8(html_text(tag))
}
#getContent(data$href[1])
allText = sapply(data$href, getContent)
allText
#out <- file(filename, "w", encoding="BIG-5")
write.table(allText, filename)
#close(out)
}
set.seed(10111)
x = matrix(rnorm(40), 20, 2)
y = rep(c(-1, 1), c(10, 10))
x[y == 1, ] = x[y == 1, ] + 1
plot(x, col = y + 3, pch = 19)
library(e1071)
dat = data.frame(x, y = as.factor(y))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1, 1], to = grange[2, 1], length = n)
x2 = seq(from = grange[1, 2], to = grange[2, 2], length = n)
expand.grid(X1 = x1, X2 = x2)
}
xgrid = make.grid(x)
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("red", "blue")[as.numeric(ygrid)], pch = 20, cex = 0.2)
points(x, col = y + 3, pch = 19)
points(x[svmfit$index, ], pch = 5, cex = 2)
beta = drop(t(svmfit$coefs) %*% x[svmfit$index, ])
beta0 = svmfit$rho
plot(xgrid, col = c("red", "blue")[as.numeric(ygrid)], pch = 20, cex = 0.2)
points(x, col = y + 3, pch = 19)
points(x[svmfit$index, ], pch = 5, cex = 2)
abline(beta0/beta[2], -beta[1]/beta[2])
abline((beta0 - 1)/beta[2], -beta[1]/beta[2], lty = 2)
abline((beta0 + 1)/beta[2], -beta[1]/beta[2], lty = 2)
load(url("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/ESL.mixture.rda"))
names(ESL.mixture)
rm(x, y)
attach(ESL.mixture)
plot(x, col = y + 1)
dat = data.frame(y = factor(y), x)
fit = svm(factor(y) ~ ., data = dat, scale = FALSE, kernel = "radial", cost = 5)
xgrid = expand.grid(X1 = px1, X2 = px2)
ygrid = predict(fit, xgrid)
plot(xgrid, col = as.numeric(ygrid), pch = 20, cex = 0.2)
points(x, col = y + 1, pch = 19)
func = predict(fit, xgrid, decision.values = TRUE)
func = attributes(func)$decision
xgrid = expand.grid(X1 = px1, X2 = px2)
ygrid = predict(fit, xgrid)
plot(xgrid, col = as.numeric(ygrid), pch = 20, cex = 0.2)
points(x, col = y + 1, pch = 19)
contour(px1, px2, matrix(func, 69, 99), level = 0, add = TRUE)
contour(px1, px2, matrix(prob, 69, 99), level = 0.5, add = TRUE, col = "blue",
lwd = 2)
library(NLP)
library(tm)
library(tmcn)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.7.0_79/")
library(rJava)
library(SnowballC)
library(slam)
library(Matrix)
# import data
source("readFromTXT.R")
# corpus to tdm
d.corpus <- Corpus(VectorSource(seg))
tdm <- TermDocumentMatrix(d.corpus,
control = list(wordLengths = c(2, Inf)))
View(inspect(tdm[1:9, 1:10]))
ass = findAssocs(tdm, "老師", 0.75)
# tf-idf computation
N = tdm$ncol
tf <- apply(tdm, 2, sum)
idfCal <- function(word_doc)
{
log2( N / nnzero(word_doc) )
}
idf <- apply(tdm, 1, idfCal)
doc.tfidf <- as.matrix(tdm)
for(x in 1:nrow(tdm))
{
for(y in 1:ncol(tdm))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
# 可以用 findFreqTerms
# 看看在所有文件裡出現 200 次以上的關鍵字有哪些。
result = findFreqTerms(tdm, 200)
# 畫出 tf-idf 統計圖
library(plotly)
topID = lapply(rownames(as.data.frame(ass)), function(x)
which(rownames(tdm) == x))
topID = unlist(topID)
plot_ly(data = as.data.frame(doc.tfidf),
x = as.numeric(colnames(doc.tfidf)),
y = doc.tfidf[topID[10],],
name = rownames(doc.tfidf)[topID[10]],
type = "scatter", mode= "box") %>%
add_trace(y = doc.tfidf[topID[2],],
name = rownames(doc.tfidf)[topID[2]])
# get short doc matrix
nonzero = (doc.tfidf != rep(0,10))
nonzeroid = which(row_sums(nonzero) != 0)
q <- rownames(doc.tfidf[nonzeroid,])
all.term <- rownames(doc.tfidf)
loc <- which(all.term %in% q)
s.tdm <- doc.tfidf[loc,]
View(s.tdm)
# result : cos similarity ranking
cos.sim <- function(x, y)
{
(as.vector(x) %*% as.vector(y)) / (norm(as.matrix(x)) * norm(y))
}
doc.cos <- cos.sim(x=as.matrix(s.tdm[,1]),
y=as.matrix(s.tdm[,2]))
doc.cos <- apply(s.tdm[,2:10], 2, cos.sim,
y=as.matrix(s.tdm[,2]))
orderDoc <- doc.cos[order(doc.cos, decreasing = TRUE)]
plot_ly(data = as.data.frame(orderDoc),
x = rownames(as.data.frame(orderDoc)),
y = orderDoc,
name = rownames(doc.tfidf)[topID[10]],
type = "bar", mode= "box")
# Kmeans 分群
library(stats)
kmeansOut <- kmeans(doc.tfidf, 5, nstart = 20)
data(iris)
ir.pca <- prcomp(iris[,1:4])
ir.species <- iris[, 5]
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
library(devtools)
install_github("ggbiplot", "vqv")
library(scales)
library(grid)
library(ggbiplot)
data(iris)
ir.pca <- prcomp(iris[,1:4])
ir.species <- iris[, 5]
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
source('MLDM.R')
testTfidf = doc.tfidf
tfidf.pca <- prcomp(testTfidf)
tfidf.kmeans <- as.factor(kmeansOut$cluster)
g <- ggbiplot(tfidf.pca, obs.scale = 1, var.scale = 1,
groups = tfidf.kmeans, ellipse = TRUE,
circle = TRUE, labels = rownames(testTfidf))
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
data(iris)
library(e1071)
dat = data.frame(iris[, 1:4], y = as.factor(iris[,5]))
library(e1071)
data(iris)
dat = data.frame(iris[, 1:4], y = as.factor(iris[,5]))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
View(dat)
dat = data.frame(x, y = as.factor(y))
View(dat)
set.seed(10111)
x = matrix(rnorm(40), 20, 2)
y = rep(c(-1, 1), c(10, 10))
x[y == 1, ] = x[y == 1, ] + 1
plot(x, col = y + 3, pch = 19)
dat = data.frame(x, y = as.factor(y))
View(dat)
as.factor(iris[,5])
data(iris)
dat = data.frame(iris[, 1:4], y = as.factor(iris[,5]))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(e1071)
dat = data.frame(x, y = as.factor(y))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(e1071)
data(iris)
dat = data.frame(iris[, 1:4], y = as.factor(iris[,5]))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
plot(svmfit, dat)
plot(svmfit, dat)
print(svmfit)
plot(svmfit, dat)
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(e1071)
dat = data.frame(x, y = as.factor(y))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(e1071)
data(iris)
dat = data.frame(iris[, 1:4], y = as.factor(iris[,5]))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(e1071)
dat = data.frame(x, y = as.factor(y))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
library(e1071)
data(iris)
dat = data.frame(iris[, 1:4], y = as.factor(iris[,5]))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
dat = data.frame(iris[, 1:4], y = as.factor(rep(c(-1, 1), c(length(iris[, 1])/2, length(iris[, 1])/2)))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
dat = data.frame(iris[, 1:4], y = as.factor(rep(c(-1, 1), c(length(iris[, 1])/2, length(iris[, 1])/2)))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
data(iris)
dat = data.frame(iris[, 1:4], y = as.factor(rep(c(-1, 1), c(length(iris[, 1])/2, length(iris[, 1])/2)))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
dat = data.frame(iris[, 1:4], y = as.factor(rep(c(-1, 1), c(length(iris[, 1])/2, length(iris[, 1])/2)))
svmfit = svm(y ~ ., data = dat,
kernel = "linear",
cost = 10, scale = FALSE)
print(svmfit)
plot(svmfit, dat)
dat = data.frame(iris[, 1:4], y = as.factor(rep(c(-1, 1), c(length(iris[, 1])/2, length(iris[, 1])/2)))
