View(cl_info)
cl_info_year <- local({
select(cl_info, data_dt, mortgage_bal)%>%
mutate(month= substring(data_dt, 1, 7))%>%
group_by(month)%>%
summarise(mortgage_total_bal= sum(mortgage_bal, na.rm= TRUE))%>%
mutate(year= substring(data_dt, 1, 4))%>%
group_by(year)%>%
arrange(month)%>%
summarise(month= head(month, 1), mortgage_total_bal= head(mortgage_total_bal, 1))%>%
select(year, mortgage_total_bal)
# 請填寫你的程式碼。
})
cl_info_year <- local({
select(cl_info, data_dt, mortgage_bal)%>%
mutate(month= substring(data_dt, 1, 7))%>%
group_by(month)%>%
summarise(mortgage_total_bal= sum(mortgage_bal, na.rm= TRUE))%>%
mutate(year= substring(data_dt, 1, 4))%>%
group_by(year)%>%
arrange(month)%>%
summarise(month= head(month, 1), mortgage_total_bal= head(mortgage_total_bal, 1))%>%
select(year, mortgage_total_bal)
# 請填寫你的程式碼。
})
cl_info_year <- local({
select(cl_info, data_dt, mortgage_bal) %>%
mutate(month = substring(data_dt,1,7)) %>%
group_by(month) %>%
summarise(mortgage_total_bal = sum(mortgage_bal, na.rm = TRUE)) %>%
mutate(year = substring(month, 1, 4)) %>%
group_by(year) %>%
arrange(month) %>%
summarise(month = head(month, 1), mortgage_total_bal = head(mortgage_total_bal, 1)) %>%
select(year, mortgage_total_bal)
# 請填寫你的程式碼。
})
stopifnot(is.data.frame(cl_info_year))
stopifnot(colnames(cl_info_year) == c("year", "mortgage_total_bal"))
stopifnot(class(cl_info_year$year) == "character")
stopifnot(class(cl_info_year$mortgage_total_bal) == "numeric")
stopifnot(nrow(cl_info_year) == 9)
stopifnot(range(cl_info_year$year) == c("2006", "2014"))
stopifnot(range(cl_info_year$mortgage_total_bal) == c(3.79632e+12, 5.726784e+12))
answerHW <- local({
inner_join(cl_info_year, gdp, by= "year")%>%
mutate(index= mortgage_total_bal/ gdp)%>%
select(year, index)
# 請在這邊填寫你的程式碼。
})
stopifnot(is.data.frame(answerHW))
stopifnot(nrow(answerHW) == 8)
stopifnot(colnames(answerHW) == c("year", "index"))
stopifnot(class(answerHW$year) == "character")
stopifnot(class(answerHW$index) == "numeric")
stopifnot(min(answerHW$index) > 0.3)
stopifnot(max(answerHW$index) < 0.4)
submit()
bye()
q()
chart<- plotly_POST(p, filename="line/mode1")
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
del_na<- which(is.na(raw_data$semester)== TRUE)
raw_data<- raw_data[-del_na, ]
raw_data[is.na(raw_data)]<- 0
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'total', type = 'scatter', mode = 'lines')
chart<- plotly_POST(p, filename="line/mode1")
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/HW/HW2/hw2.csv", sep= ",", header= TRUE)
del_na<- which(is.na(raw_data$year)== TRUE)
raw_data<- raw_data[-del_na, ]
raw_data[is.na(raw_data)]<- 0
p <- plot_ly(raw_data, x = ~year, y = ~prof, name = 'Prof.', type = 'scatter', mode = 'lines')
chart<- plotly_POST(p, filename="line/mode1")
source('D:/github/2017_data_course/HW/HW2/R.R')
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
View(raw_data)
library(ggplot2)
library(plotly)
require(stats)
rawdata = read.csv('teacher.csv',
header = TRUE)
delId = which(is.na(rawdata$Year) == TRUE)
rawdata = rawdata[-delId,]
rawdata = read.csv('data/teacher.csv',
header = TRUE)
setwd("D:/github/2017_data_course/example/teacher (1)/teacher")
rawdata = read.csv('data/teacher.csv',
header = TRUE)
delId = which(is.na(rawdata$Year) == TRUE)
rawdata = rawdata[-delId,]
rawdata[is.na(rawdata)] = 0
lastyearId = length(rawdata$Year)
firstYear = rawdata$Year[1]
lastYear = rawdata$Year[lastyearId]
n = lastYear - firstYear + 1
allType = names(rawdata)
rownames(rawdata) <- 1:nrow(rawdata)
typeId = c(2:9)
newTable = data.frame()
for( nid in c(48:n) )
{
year = as.matrix(rep(rawdata$Year[nid], length(rawdata[nid,typeId])))
people = as.matrix(as.numeric(rawdata[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(year, log(people), type, people)
newTable = rbind(newTable, temp)
}
names(newTable) = c('year', 'log-people', 'pos', 'people')
newTable = newTable[with(newTable, order(pos)),]
rownames(newTable) <- 1:nrow(newTable)
p <- plot_ly(data = newTable[,1:3], x = ~year,
y = ~people, color = ~pos) %>%
add_lines( yaxis = list(range = c(0,10)))
p
htmlwidgets::saveWidget(p, "index.html")
save(rawdata, newTable, file = "newTable.RData")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
del_na<- which(is.na(raw_data$semester)== TRUE)
raw_data<- raw_data[-del_na, ]
raw_data[is.na(raw_data)]<- 0
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'total', type = 'scatter', mode = 'lines')
chart<- plotly_POST(p, filename="line/mode1")
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'total', type = 'scatter', mode = 'lines')
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'total', type = 'scatter', mode = 'lines')
p
htmlwidgets::saveWidget(p, "index.html")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
del_na<- which(is.na(raw_data$semester)== TRUE)
raw_data<- raw_data[-del_na, ]
raw_data[is.na(raw_data)]<- 0
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'total', type = 'scatter', mode = 'lines')
p
htmlwidgets::saveWidget(p, "index.html")
View(raw_data)
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
View(raw_data)
del_na<- which(is.na(raw_data$semester)== TRUE)
raw_data<- raw_data[-del_na, ]
raw_data[is.na(raw_data)]<- 0
View(rawdata)
View(rawdata)
View(raw_data)
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
View(raw_data)
del_na<- which(is.na(raw_data$semester)== TRUE)
raw_data<- raw_data[-del_na, ]
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'total', type = 'scatter', mode = 'lines')
p
htmlwidgets::saveWidget(p, "index.html")
View(raw_data)
p <- plot_ly(raw_data, x = ~semester, y = ~total, name = 'number', type = 'scatter', mode = 'lines')%>%
add_trace(y = ~Liberal.Art, name = 'Liberal.Art', mode = 'lines') %>%
add_trace(y = ~Science, name = 'Science', mode = 'lines')
p
htmlwidgets::saveWidget(p, "index.html")
save(rawdata, newTable, file = "newTable.RData")
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = rawdata$semester[lastsemId]
n = lastsem - firstsem + 1
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
rownwmes
rownames
allType
View(rawdata)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = rawdata$semester[lastsemId]
n = lastsem - firstsem + 1
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:14)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(rawdata[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(2:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(rawdata[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(2:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(48:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
n = lastsem - firstsem + 1
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = lastsem - firstsem + 1
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:14)
newTable = data.frame()
for( nid in c(48:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(2:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(2:n) )
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
for( nid in c(2:n) )
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
View(semester)
for( nid in c(1:n) )
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
View(semester)
for( nid in c(1:n) )
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = lastsem - firstsem + 1
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:14)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))}
newTable = data.frame()
for( nid in c(1:n) )
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
typeId = c(2:13)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
for( nid in c(1:n) )
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = lastsem - firstsem + 1
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:13)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
for( nid in c(1:n) )
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))}
raw_data[nid,typeId]
raw_data[1,typeId])
raw_data[1,typeId]
as.numeric(raw_data[1,typeId])
as.matrix(as.numeric(raw_data[1,typeId]))
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
n = 18
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
names(newTable) = c('year', 'people', 'pos')
newTable = newTable[with(newTable, order(pos)),]
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, Log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = 18
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:13)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
names(newTable) = c('semester', 'class_num', 'pos')
newTable = newTable[with(newTable, order(pos)),]
rownames(newTable) <- 1:nrow(newTable)
p <- plot_ly(data = newTable, x = ~semester,
y = ~class_num, color = ~pos) %>%
add_lines( yaxis = list(range = c(0,10)))
p
htmlwidgets::saveWidget(p, "index.html")
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = 18
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:13)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
names(newTable) = c('semester', 'class_num', 'pos')
newTable = newTable[with(newTable, order(pos)),]
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = 18
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:13)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
names(newTable) = c('semester', 'class_num', 'pos')
newTable = newTable[with(newTable, order(pos)),]
rownames(newTable) <- 1:nrow(newTable)
p <- plot_ly(data = newTable, x = ~semester,
y = ~class_num, color = ~pos) %>%
add_lines( yaxis = list(range = c(0,10)))
p
htmlwidgets::saveWidget(p, "index.html")
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = 18
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
typeId = c(2:13)
newTable = data.frame()
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, log(class_num), type)
newTable = rbind(newTable, temp)
}
names(newTable) = c('semester', 'class_num', 'pos')
newTable = newTable[with(newTable, order(pos)),]
p <- plot_ly(data = newTable, x = ~semester,
y = ~class_num, color = ~pos) %>%
add_lines( yaxis = list(range = c(0,10)))
htmlwidgets::saveWidget(p, "index.html")
rownames(newTable) <- 1:nrow(newTable)
for( nid in c(1:n) )
p
library("dplyr")
library("plotly")
raw_data<- read.csv("D:/github/2017_data_course/project/eng_class.csv", sep= ",", header= TRUE)
lastsemId = length(raw_data$semester)
firstsem = raw_data$semester[1]
lastsem = raw_data$semester[lastsemId]
n = 18
allType = names(raw_data)
rownames(raw_data) <- 1:nrow(raw_data)
# NerTbale is as follows:
# year, people, type
# 1950, 100, prof.
# ...
# 2010, 50, lecture
typeId = c(2:13)
newTable = data.frame()
for( nid in c(1:n) )
{
semester = as.matrix(rep(raw_data$semester[nid], length(raw_data[nid,typeId])))
class_num = as.matrix(as.numeric(raw_data[nid,typeId]))
type = as.matrix(as.character(allType[typeId]))
temp = cbind(semester, class_num, type)
newTable = rbind(newTable, temp)
}
names(newTable) = c('semester', 'class_num', 'pos')
newTable = newTable[with(newTable, order(pos)),]
rownames(newTable) <- 1:nrow(newTable)
p <- plot_ly(data = newTable, x = ~semester,
y = ~class_num, color = ~pos) %>%
add_lines( yaxis = list(range = c(0,150)))
p
htmlwidgets::saveWidget(p, "index.html")
View(newTable)
newTable<- newTable[:198, ]
newTable<- newTable[0:198, ]
rownames(newTable) <- 1:nrow(newTable)
p <- plot_ly(data = newTable, x = ~semester,
y = ~class_num, color = ~pos) %>%
add_lines( yaxis = list(range = c(0,150)))
p
htmlwidgets::saveWidget(p, "index.html")
